#nullable enable
Gu.Wpf.GridExtensions.Cell
Gu.Wpf.GridExtensions.Column
Gu.Wpf.GridExtensions.ColumnDefinitions
Gu.Wpf.GridExtensions.ColumnDefinitions.ColumnDefinitions() -> void
Gu.Wpf.GridExtensions.ColumnDefinitions.ColumnDefinitions(System.Collections.Generic.IList<System.Windows.Controls.ColumnDefinition!>! collection) -> void
Gu.Wpf.GridExtensions.ColumnDefinitionsConverter
Gu.Wpf.GridExtensions.ColumnDefinitionsConverter.ColumnDefinitionsConverter() -> void
Gu.Wpf.GridExtensions.Grid
Gu.Wpf.GridExtensions.GridCell
Gu.Wpf.GridExtensions.GridCell.Column.get -> int
Gu.Wpf.GridExtensions.GridCell.Equals(Gu.Wpf.GridExtensions.GridCell other) -> bool
Gu.Wpf.GridExtensions.GridCell.GridCell() -> void
Gu.Wpf.GridExtensions.GridCell.GridCell(int row, int column) -> void
Gu.Wpf.GridExtensions.GridCell.Row.get -> int
Gu.Wpf.GridExtensions.GridCellConverter
Gu.Wpf.GridExtensions.GridCellConverter.GridCellConverter() -> void
Gu.Wpf.GridExtensions.Row
Gu.Wpf.GridExtensions.RowAndColumnDefinitions
Gu.Wpf.GridExtensions.RowAndColumnDefinitions.ColumnDefinitions.get -> Gu.Wpf.GridExtensions.ColumnDefinitions?
Gu.Wpf.GridExtensions.RowAndColumnDefinitions.ColumnDefinitions.set -> void
Gu.Wpf.GridExtensions.RowAndColumnDefinitions.RowAndColumnDefinitions() -> void
Gu.Wpf.GridExtensions.RowAndColumnDefinitions.RowDefinitions.get -> Gu.Wpf.GridExtensions.RowDefinitions?
Gu.Wpf.GridExtensions.RowAndColumnDefinitions.RowDefinitions.set -> void
Gu.Wpf.GridExtensions.RowAndColumnDefinitionsConverter
Gu.Wpf.GridExtensions.RowAndColumnDefinitionsConverter.RowAndColumnDefinitionsConverter() -> void
Gu.Wpf.GridExtensions.RowDefinitions
Gu.Wpf.GridExtensions.RowDefinitions.RowDefinitions() -> void
Gu.Wpf.GridExtensions.RowDefinitions.RowDefinitions(System.Collections.Generic.IList<System.Windows.Controls.RowDefinition!>! collection) -> void
Gu.Wpf.GridExtensions.RowDefinitionsConverter
Gu.Wpf.GridExtensions.RowDefinitionsConverter.RowDefinitionsConverter() -> void
override Gu.Wpf.GridExtensions.ColumnDefinitionsConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext! context, System.Type! sourceType) -> bool
override Gu.Wpf.GridExtensions.ColumnDefinitionsConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext! context, System.Type! destinationType) -> bool
override Gu.Wpf.GridExtensions.ColumnDefinitionsConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext! context, System.Globalization.CultureInfo! culture, object! value) -> object!
override Gu.Wpf.GridExtensions.ColumnDefinitionsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext! context, System.Globalization.CultureInfo! culture, object! value, System.Type! destinationType) -> object!
override Gu.Wpf.GridExtensions.GridCell.Equals(object? obj) -> bool
override Gu.Wpf.GridExtensions.GridCell.GetHashCode() -> int
override Gu.Wpf.GridExtensions.GridCellConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext! context, System.Type! sourceType) -> bool
override Gu.Wpf.GridExtensions.GridCellConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext! context, System.Type! destinationType) -> bool
override Gu.Wpf.GridExtensions.GridCellConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext! context, System.Globalization.CultureInfo! culture, object! value) -> object!
override Gu.Wpf.GridExtensions.GridCellConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext! context, System.Globalization.CultureInfo! culture, object! value, System.Type! destinationType) -> object!
override Gu.Wpf.GridExtensions.RowAndColumnDefinitionsConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext! context, System.Type! sourceType) -> bool
override Gu.Wpf.GridExtensions.RowAndColumnDefinitionsConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext! context, System.Type! destinationType) -> bool
override Gu.Wpf.GridExtensions.RowAndColumnDefinitionsConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext! context, System.Globalization.CultureInfo! culture, object! value) -> object!
override Gu.Wpf.GridExtensions.RowAndColumnDefinitionsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext! context, System.Globalization.CultureInfo! culture, object! value, System.Type! destinationType) -> object!
override Gu.Wpf.GridExtensions.RowDefinitionsConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext! context, System.Type! sourceType) -> bool
override Gu.Wpf.GridExtensions.RowDefinitionsConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext! context, System.Type! destinationType) -> bool
override Gu.Wpf.GridExtensions.RowDefinitionsConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext! context, System.Globalization.CultureInfo! culture, object! value) -> object!
override Gu.Wpf.GridExtensions.RowDefinitionsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext! context, System.Globalization.CultureInfo! culture, object! value, System.Type! destinationType) -> object!
static Gu.Wpf.GridExtensions.Cell.GetIndex(System.Windows.UIElement! element) -> Gu.Wpf.GridExtensions.GridCell
static Gu.Wpf.GridExtensions.Cell.SetIndex(System.Windows.UIElement! element, Gu.Wpf.GridExtensions.GridCell value) -> void
static Gu.Wpf.GridExtensions.Column.GetDefinitions(System.Windows.Controls.Grid! element) -> Gu.Wpf.GridExtensions.ColumnDefinitions?
static Gu.Wpf.GridExtensions.Column.SetDefinitions(System.Windows.Controls.Grid! element, Gu.Wpf.GridExtensions.ColumnDefinitions? value) -> void
static Gu.Wpf.GridExtensions.Grid.GetLayout(System.Windows.Controls.Grid! element) -> Gu.Wpf.GridExtensions.RowAndColumnDefinitions?
static Gu.Wpf.GridExtensions.Grid.SetLayout(System.Windows.Controls.Grid! element, Gu.Wpf.GridExtensions.RowAndColumnDefinitions? value) -> void
static Gu.Wpf.GridExtensions.GridCell.operator !=(Gu.Wpf.GridExtensions.GridCell left, Gu.Wpf.GridExtensions.GridCell right) -> bool
static Gu.Wpf.GridExtensions.GridCell.operator ==(Gu.Wpf.GridExtensions.GridCell left, Gu.Wpf.GridExtensions.GridCell right) -> bool
static Gu.Wpf.GridExtensions.Row.GetDefinitions(System.Windows.Controls.Grid! element) -> Gu.Wpf.GridExtensions.RowDefinitions?
static Gu.Wpf.GridExtensions.Row.SetDefinitions(System.Windows.Controls.Grid! element, Gu.Wpf.GridExtensions.RowDefinitions? value) -> void
static readonly Gu.Wpf.GridExtensions.Cell.IndexProperty -> System.Windows.DependencyProperty!
static readonly Gu.Wpf.GridExtensions.Column.DefinitionsProperty -> System.Windows.DependencyProperty!
static readonly Gu.Wpf.GridExtensions.Grid.LayoutProperty -> System.Windows.DependencyProperty!
static readonly Gu.Wpf.GridExtensions.Row.DefinitionsProperty -> System.Windows.DependencyProperty!